-- DO NOT MODIFY THIS FILE.
-- This file is generated by hard_tests_gen

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.bc1t_un_test_const.all;
use work.global_const.all;
use work.bus_const.all;

entity bc1t_un_fake_ram is
    port (
        clk, rst: in std_logic;
        cpu_i: in BusC2D;
        cpu_o: out BusD2C
    );
end bc1t_un_fake_ram;

architecture bhv of bc1t_un_fake_ram is
    type WordsArray is array(0 to MAX_RAM_ADDRESS) of std_logic_vector(DataWidth);
    signal words: WordsArray;
    signal wordAddr: integer;
    signal bitSelect: std_logic_vector(DataWidth);
    signal llBit: std_logic;
    signal llLoc: std_logic_vector(AddrWidth);
begin
    cpu_o.busy <= PIPELINE_NONSTOP;

    wordAddr <= to_integer(unsigned(cpu_i.addr(11 downto 2)));

    bitSelect <= (
        31 downto 24 => cpu_i.byteSelect(3),
        23 downto 16 => cpu_i.byteSelect(2),
        15 downto 8 => cpu_i.byteSelect(1),
        7 downto 0 => cpu_i.byteSelect(0)
    );

    process (clk) begin
        if (rising_edge(clk)) then
            if (rst = RST_ENABLE) then
                -- CODE BELOW IS AUTOMATICALLY GENERATED
words(1) <= x"01_40_03_3c"; -- RUN lui $3, 0x4001
words(2) <= x"ef_7f_04_3c"; -- RUN lui $4, 0x7fef
words(3) <= x"ff_ff_84_34"; -- RUN ori $4, 0xffff
words(4) <= x"ff_ff_05_3c"; -- RUN lui $5, 0xffff
words(5) <= x"ff_ff_a5_34"; -- RUN ori $5, $5, 0xffff
words(6) <= x"00_08_83_44"; -- RUN mtc1 $3, $1
words(7) <= x"00_18_84_44"; -- RUN mtc1 $4, $3
words(8) <= x"00_10_85_44"; -- RUN mtc1 $5, $2
words(9) <= x"37_00_20_46"; -- RUN c.ule.d $f0, $f0
words(10) <= x"04_00_01_45"; -- RUN bc1t 0x10
words(11) <= x"00_00_00_00"; -- RUN nop
words(12) <= x"01_00_4a_35"; -- RUN ori $10, $10, 0x0001
words(13) <= x"00_00_00_00"; -- RUN nop
words(14) <= x"00_00_00_00"; -- RUN nop
words(15) <= x"00_00_00_00"; -- RUN nop
words(16) <= x"00_00_00_00"; -- RUN nop
words(17) <= x"10_00_00_08"; -- RUN j 0x40
words(18) <= x"00_00_00_00"; -- RUN nop
            elsif ((cpu_i.enable = '1') and (cpu_i.write = '1')) then
                words(wordAddr) <= (words(wordAddr) and not bitSelect) or (cpu_i.dataSave and bitSelect);
            end if;
        end if;
    end process;

    cpu_o.dataLoad <= words(wordAddr) when (cpu_i.enable = '1') and (cpu_i.write = '0') else 32b"0";
end bhv;
