-- DO NOT MODIFY THIS FILE.
-- This file is generated by hard_tests_gen

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.arith2_test_const.all;
use work.global_const.all;

entity arith2_fake_ram is
    port (
        clk, rst: in std_logic;
        enable_i, write_i: in std_logic;
        data_i: in std_logic_vector(DataWidth);
        addr_i: in std_logic_vector(AddrWidth);
        byteSelect_i: in std_logic_vector(3 downto 0);
        data_o: out std_logic_vector(DataWidth);
        sync_i: in std_logic_vector(2 downto 0);
        scCorrect_o: out std_logic
    );
end arith2_fake_ram;

architecture bhv of arith2_fake_ram is
    type WordsArray is array(0 to MAX_RAM_ADDRESS) of std_logic_vector(DataWidth);
    signal words: WordsArray;
    signal wordAddr: integer;
    signal bitSelect: std_logic_vector(DataWidth);
    signal llBit: std_logic;
    signal llLoc: std_logic_vector(AddrWidth);
begin
    wordAddr <= to_integer(unsigned(addr_i(31 downto 2)));

    bitSelect <= (
        31 downto 24 => byteSelect_i(3),
        23 downto 16 => byteSelect_i(2),
        15 downto 8 => byteSelect_i(1),
        7 downto 0 => byteSelect_i(0)
    );

    process (clk) begin
        if (rising_edge(clk)) then
            if (rst = RST_ENABLE) then
                -- CODE BELOW IS AUTOMATICALLY GENERATED
words(1) <= x"67_35_42_24"; -- RUN addiu $2, $2, 0x3567
words(2) <= x"ff_ff_42_24"; -- RUN addiu $2, $2, 0xffff
words(3) <= x"00_14_02_00"; -- RUN sll $2, $2, 0x10
words(4) <= x"cd_fc_03_24"; -- RUN subu $3, $0, 0x333
words(5) <= x"20_20_43_00"; -- RUN add $4, $2, $3
words(6) <= x"21_20_43_00"; -- RUN addu $4, $2, $3
words(7) <= x"20_20_84_00"; -- RUN add $4, $4, $4
words(8) <= x"01_00_04_34"; -- RUN ori $4, $0, 0x1
words(9) <= x"c0_27_04_00"; -- RUN sll $4, $4, 0x1f
words(10) <= x"ff_ff_85_20"; -- RUN addi $5, $4, 0xffff
words(11) <= x"00_00_00_00"; -- RUN nop
words(12) <= x"00_00_00_00"; -- RUN nop
words(13) <= x"00_00_00_00"; -- RUN nop
words(14) <= x"00_00_00_00"; -- RUN nop
words(15) <= x"00_00_00_00"; -- RUN nop
words(16) <= x"01_00_06_34"; -- RUN ori $6, $0, 0x1
words(17) <= x"23_38_86_00"; -- RUN subu $7, $4, $6
            elsif ((enable_i = '1') and (write_i = '1')) then
                words(wordAddr) <= (words(wordAddr) and not bitSelect) or (data_i and bitSelect);
            end if;
        end if;
    end process;

    process(clk) begin
        if (falling_edge(clk)) then
            scCorrect_o <= '0';
            if (sync_i(0) = '1') then
                llBit <= '1';
                llLoc <= addr_i;
            elsif (sync_i(1) = '1' and llBit = '1') then
                if (addr_i = llLoc) then
                    scCorrect_o <= '1';
                    llBit <= '0';
                end if;
            elsif (addr_i = llLoc) then
                llBit <= '0';
            end if;
            if (sync_i(2) = '1') then
                llBit <= '0';
            end if;
        end if;
    end process;

    data_o <= words(wordAddr) when (enable_i = '1') and (write_i = '0') else 32b"0";
end bhv;
