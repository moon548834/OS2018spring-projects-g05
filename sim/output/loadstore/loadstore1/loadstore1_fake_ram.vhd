-- DO NOT MODIFY THIS FILE.
-- This file is generated by hard_tests_gen

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.loadstore1_test_const.all;
use work.global_const.all;

entity loadstore1_fake_ram is
    generic (
        isInst: boolean := false -- The RAM will be initialized with instructions when true
    );
    port (
        enable_i, write_i, clk: in std_logic;
        data_i: in std_logic_vector(DataWidth);
        addr_i: in std_logic_vector(AddrWidth);
        byteSelect_i: in std_logic_vector(3 downto 0);
        data_o: out std_logic_vector(DataWidth)
    );
end loadstore1_fake_ram;

architecture bhv of loadstore1_fake_ram is
    type WordsArray is array(0 to MAX_RAM_ADDRESS) of std_logic_vector(DataWidth);
    signal words: WordsArray;
    signal wordAddr: integer;
    signal bitSelect: std_logic_vector(DataWidth);
begin
    wordAddr <= to_integer(unsigned(addr_i(31 downto 2)));

    bitSelect <= (
        31 downto 24 => byteSelect_i(3),
        23 downto 16 => byteSelect_i(2),
        15 downto 8 => byteSelect_i(1),
        7 downto 0 => byteSelect_i(0)
    );

    process (clk) begin
        if (not isInst) then
            if (rising_edge(clk) and (enable_i = '1') and (write_i = '1')) then
                words(wordAddr) <= (words(wordAddr) and not bitSelect) or (data_i and bitSelect);
            end if;
        else
            -- The first instruction is at 0x4
            -- CODE BELOW IS AUTOMATICALLY GENERATED
words(1) <= x"ff_ee_03_34"; -- RUN ori $3, $0, 0xeeff
words(2) <= x"03_00_03_a0"; -- RUN sb  $3, 0x3($0)
words(3) <= x"02_1a_03_00"; -- RUN srl $3, $3, 8
words(4) <= x"02_00_03_a0"; -- RUN sb  $3, 0x2($0)
words(5) <= x"dd_cc_03_34"; -- RUN ori $3, $0, 0xccdd
words(6) <= x"01_00_03_a0"; -- RUN sb  $3, 0x1($0)
words(7) <= x"02_1a_03_00"; -- RUN srl $3, $3, 8
words(8) <= x"00_00_03_a0"; -- RUN sb  $3, 0x0($0)
words(9) <= x"03_00_01_80"; -- RUN lb  $1, 0x3($0)
words(10) <= x"02_00_01_90"; -- RUN lbu $1, 0x2($0)
words(11) <= x"00_00_01_8c"; -- RUN lw  $1, 0x0($0)
        end if;
    end process;

    data_o <= words(wordAddr) when (enable_i = '1') and (write_i = '0') else 32b"0";
end bhv;
